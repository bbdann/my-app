{"version":3,"sources":["utils/constants.js","utils/context.js","components/Form.js","containers/Modal/Modal.js","components/Loader.js","components/EditItem.js","components/VacancyItem.js","containers/VacancyList.js","containers/VacanciesPage/index.js","App.js","serviceWorker.js","index.js"],"names":["SERVER_URL","Context","React","createContext","Form","props","changeHandler","e","setState","target","name","value","submitHandler","preventDefault","state","title","description","city","image","onSubmit","clsModal","values","this","Grid","container","direction","justify","alignItems","TextField","id","label","type","placeholder","defaultValue","onChange","style","marginTop","Button","variant","color","margin","onClick","Component","Modal","children","useState","isOpen","setIsOpen","Fragment","marginBottom","className","display","justifyContent","EditItem","vacancyId","editItem","size","data","cb","VacancyItem","vacancy","removeItem","useContext","float","Box","component","m","src","alt","VacancyList","vacancys","map","index","key","onToggle","VacanciesPage","setVacancy","loading","setLoading","console","log","useEffect","fetch","then","response","json","Provider","axios","delete","status","filter","catch","error","callBack","post","concat","Loader","length","put","vacansiesNew","vacansy","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1e3ae577.chunk.js","sourcesContent":["export const SERVER_URL = \"http://localhost:3001\";\n","import React from 'react'\r\n\r\nconst Context = React.createContext()\r\n\r\nexport default Context","import React, {Component} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {Grid, Button, TextField} from \"@material-ui/core\";\r\n\r\nclass Form extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            title: props.values ? props.values.title : \"\",\r\n            description: props.values ? props.values.description : \"\",\r\n            city: props.values ? props.values.city : \"\",\r\n            image: props.values ? props.values.image : \"\"\r\n        };\r\n    }\r\n\r\n    static propTypes = {\r\n      onSubmit: PropTypes.func.isRequired\r\n    };\r\n\r\n    changeHandler = e => this.setState({[e.target.name]: e.target.value});\r\n\r\n    submitHandler = e => {\r\n        e.preventDefault();\r\n        const {title, description, city, image} = this.state;\r\n        const { onSubmit, clsModal } = this.props;\r\n\r\n        const data = {\r\n            title,\r\n            description,\r\n            city,\r\n            image\r\n        };\r\n\r\n      onSubmit(data, clsModal);\r\n    };\r\n\r\n    render() {\r\n        const {title, description, city, image} = this.state;\r\n        const {clsModal, values = {}} = this.props;\r\n        return (\r\n            <form onSubmit={this.submitHandler}>\r\n                <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justify=\"space-around\"\r\n                    alignItems=\"center\"\r\n                >\r\n                    <TextField\r\n                        id=\"standard-password-input\"\r\n                        label=\"Title\"\r\n                        type=\"text\"\r\n                        name=\"title\"\r\n                        placeholder=\"Title\"\r\n                        defaultValue={values.title || title}\r\n                        onChange={this.changeHandler}\r\n                    />\r\n                    <TextField\r\n                        type=\"text\"\r\n                        name=\"description\"\r\n                        label=\"Description\"\r\n                        placeholder=\"Title\"\r\n                        defaultValue={values.description || description}\r\n                        onChange={this.changeHandler}\r\n                    />\r\n                </Grid>\r\n                <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justify=\"space-around\"\r\n                    alignItems=\"center\"\r\n                >\r\n                    <TextField\r\n                        type=\"text\"\r\n                        name=\"city\"\r\n                        label=\"City\"\r\n                        placeholder=\"What city the vacancy for?\"\r\n                        defaultValue={values.city || city}\r\n                        onChange={this.changeHandler}\r\n                    />\r\n                    <TextField\r\n                        type=\"url\"\r\n                        name=\"image\"\r\n                        label=\"image\"\r\n                        placeholder=\"Set image url\"\r\n                        defaultValue={values.image || image}\r\n                        onChange={this.changeHandler}\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justify=\"space-around\"\r\n                    alignItems=\"center\"\r\n                    style={{ marginTop: 30 }}\r\n                >\r\n                    <Button\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        style={{margin: \"10px 0 10px 0\"}}\r\n                    >\r\n                        Підтвердити\r\n                    </Button>\r\n\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        style={{margin: \"10px 0 10px 0\"}}\r\n                        onClick={clsModal}\r\n                    >\r\n                        Закрити\r\n                    </Button>\r\n                </Grid>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;\r\n","import React, { useState } from \"react\";\r\nimport Form from \"components/Form\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport \"./Modal.css\";\r\n\r\nconst Modal = ({ children, ...props }) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Button\r\n        style={{ marginBottom: \"15px\" }}\r\n        variant=\"contained\"\r\n        color=\"default\"\r\n        onClick={() => setIsOpen(true)}\r\n      >\r\n        Додати вакансію\r\n      </Button>\r\n\r\n      {isOpen && (\r\n        <div className=\"modal\">\r\n          <div className=\"modal-body\">\r\n            <h1>Додати вакансію</h1>\r\n            <Form clsModal={() => setIsOpen(false)} {...props} />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import React from \"react\";\r\n\r\nexport default () => (\r\n  <div style={{ display: \"flex\", justifyContent: \"center\", margin: \".5rem\" }}>\r\n    <div className=\"lds-dual-ring\" />\r\n  </div>\r\n);\r\n","import React, { useState } from \"react\";\r\nimport Form from \"./Form\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst EditItem = ({ vacancyId, editItem, ...props }) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  return (\r\n    <React.Fragment>\r\n      <Button\r\n        style={{ marginBottom: \"15px\" }}\r\n        size=\"small\"\r\n        variant=\"contained\"\r\n        color=\"default\"\r\n        onClick={() => setIsOpen(true)}\r\n      >\r\n        Edit\r\n      </Button>\r\n\r\n      {isOpen && (\r\n        <div className=\"modal\">\r\n          <div className=\"modal-body\">\r\n            <h1>Редагувати вакансію</h1>\r\n            <Form\r\n              clsModal={() => setIsOpen(false)}\r\n              onSubmit={(data, cb) => editItem(vacancyId, data, cb)}\r\n              {...props}\r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nEditItem.propTypes = {};\r\n\r\nexport default EditItem;\r\n","import React, { useContext } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Box } from \"@material-ui/core\";\r\nimport Context from \"../utils/context\";\r\nimport EditItem from \"./EditItem\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst VacancyItem = ({ vacancy, editItem }) => {\r\n  const { removeItem } = useContext(Context);\r\n\r\n  return (\r\n    <div className=\"main-list\">\r\n      <EditItem editItem={editItem} values={vacancy} vacancyId={vacancy.id} />\r\n      <Button\r\n        style={{ marginBottom: \"15px\", float: \"right\" }}\r\n        size=\"small\"\r\n        variant=\"contained\"\r\n        color=\"secondary\"\r\n        onClick={() => removeItem(vacancy.id)}\r\n      >\r\n        Delete\r\n      </Button>\r\n      <Box component=\"span\" m={3}>\r\n        {\r\n          <img\r\n            src={vacancy.image}\r\n            alt={vacancy.title}\r\n            style={{ float:\"left\" }}\r\n          />\r\n        }\r\n      </Box>\r\n      <br />\r\n      <span>Title: {vacancy.title}</span>\r\n      <br />\r\n      <span>Description: {vacancy.description}</span>\r\n      <br />\r\n      <span>City: {vacancy.city}</span>\r\n      <br />\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nVacancyItem.propTypes = {\r\n  vacancy: PropTypes.object.isRequired,\r\n  index: PropTypes.number\r\n};\r\n\r\nexport default VacancyItem;\r\n","import React from \"react\";\r\nimport VacancyItem from \"../components/VacancyItem\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst VacancyList = ({ vacancys, editItem, ...props }) => {\r\n  return (\r\n    <div className=\"main\">\r\n      {vacancys.map((vacancy, index) => {\r\n        return (\r\n          <VacancyItem            \r\n            vacancy={vacancy}\r\n            key={vacancy.id}\r\n            index={index}\r\n            onChange={props.onToggle}\r\n            editItem={editItem}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nVacancyList.propTypes = {\r\n  vacancys: PropTypes.arrayOf(PropTypes.object).isRequired\r\n};\r\n\r\nexport default VacancyList;\r\n","import React, {useEffect, useState} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {SERVER_URL} from \"../../utils/constants\";\r\nimport axios from \"axios\";\r\nimport Context from \"../../utils/context\";\r\nimport Modal from \"../Modal/Modal\";\r\nimport Loader from \"../../components/Loader\";\r\nimport VacancyList from \"../VacancyList\";\r\n\r\nconst VacanciesPage = () => {\r\n  const [vacancys, setVacancy] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  console.log(vacancys);\r\n\r\n  function getRequest() {\r\n    fetch(`${SERVER_URL}/vacancys`)\r\n      .then(response => response.json())\r\n      .then(vacancys => {\r\n        setVacancy(vacancys);\r\n        setLoading(false);\r\n      });\r\n  }\r\n\r\n  useEffect(() => {\r\n    getRequest();\r\n  }, []);\r\n\r\n  const addItem = (values, callBack) => {\r\n    const data = values;\r\n    axios\r\n      .post(`${SERVER_URL}/vacancys`, data)\r\n      .then(response => {\r\n        if (callBack) {\r\n          callBack();\r\n          setVacancy(vacancys.concat([data]));\r\n        }\r\n      })\r\n      .catch(error => console.log(error));\r\n  };\r\n\r\n  const removeItem = id => {\r\n    axios\r\n      .delete(`${SERVER_URL}/vacancys/` + id)\r\n      .then(response => {\r\n        if (response.status === 200) {\r\n          setVacancy(vacancys.filter(vacancy => vacancy.id !== id));\r\n        }\r\n      })\r\n      .catch(error => console.log(error));\r\n  };\r\n\r\n  const editItem = (id, values, callBack) => {\r\n    axios\r\n      .put(`${SERVER_URL}/vacancys/${id}`, values)\r\n      .then(response => {\r\n        const vacansiesNew = vacancys.map(vacansy => {\r\n          if (vacansy.id === id) {\r\n            return {\r\n              ...vacansy,\r\n              title: values.title,\r\n              description: values.description,\r\n              city: values.city,\r\n              image: values.image\r\n            }\r\n          }\r\n          return vacansy;\r\n        });\r\n\r\n        setVacancy(vacansiesNew);\r\n\r\n        //  update list locally\r\n        callBack && callBack()\r\n      })\r\n      .catch(error => console.log(error));\r\n  };\r\n\r\n  return (\r\n    <Context.Provider value={{removeItem}}>\r\n      <div className=\"wrapper\">\r\n        <h1>Актуальні вакансії</h1>\r\n        <Modal onSubmit={addItem}/>\r\n\r\n        {loading && <Loader/>}\r\n        {vacancys.length ? (\r\n          <VacancyList vacancys={vacancys} editItem={editItem}/>\r\n        ) : (\r\n          <p>Вакансії відсутні!</p>\r\n        )}\r\n      </div>\r\n    </Context.Provider>\r\n  );\r\n};\r\n\r\nVacanciesPage.propTypes = {\r\n\r\n};\r\n\r\nexport default VacanciesPage;\r\n","import React from \"react\";\r\nimport {Container} from \"@material-ui/core\";\r\nimport VacanciesPage from \"./containers/VacanciesPage\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Container>\r\n      <VacanciesPage />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}